swagger: '2.0'
info: 
  title: App for CodersCamp mentors and participants
  version: 1.0.0
tags:
- name: user
  description: Operations about user
- name: course
  description: Operations about course
- name: project
  description: Operations about project
paths:
  /login:
    post:
      tags: 
        - user
      summary: Log in user
      consumes: 
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                example: john@gmail.com
              password:
                type: string
                example: examplePassword
      responses:
        200:
          description: Successfully logged in
        401:
          description: Wrong password or email
  /register:
    post:
      tags:
        - user
      summary: Register user
      consumes: 
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
              - password
              - name
              - surname
            properties:
              email:
                type: string
              password:
                type: string
              name: 
                type: string
              surname: 
                type: string
      responses:
        200: 
          description: Registered successfully
        500: 
          description: Registration failure
  /users:
    get:
      tags:
        - user
      summary: Fetch users
      produces:
        - application/json
      parameters:
        - name: courseId
          in: query
          type: number
        - name: mentorId
          in: query
          type: number
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  /users/{id}:
    get:
      tags:
        - user
      summary: Fetch user
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          type: number
          required: true
      responses:
        200: 
          description: Success
          schema:
            $ref: '#/definitions/User'
        404:
          description: User with the given ID was not found
    put:
      tags:
        - user
      summary: Update user
      consumes: 
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          type: number
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/User'
        404:
          description: User with the given ID was not found
        400:
          description: User name is required. 
  /courses:
    post:
      tags:
        - course
      summary: Add course
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Course'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Course'
    get:
      tags:
        - course
      summary: Fetch course
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Course'
  /projects:
    post:
      tags:
        - project
      summary: Create project
      consumes: 
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Project'
        400:
          description: Project name is required
    get:
      tags:
        - project
      summary: Fetch projects
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
definitions:
  User:
    type: object
    properties:
      email:
        type: string
        example: john@gmail.com
      password:
        type: string
        example: examplePassword
      name:
        type: string
        example: John
      surname:
        type: string
        example: Doe
      type:
        type: string
        enum:
          - Admin
          - Mentor
          - Participant
      status:
        type: string
        enum:
          - Active
          - Archived
          - Deleted
      grades:
        type: array
        items:
          $ref: '#/definitions/Grade'
  Grade:
    type: object
    properties:
      id: 
        type: number
        example: 1
      sectionId: 
        type: number
        example: 2
      projectId: 
        type: number
        example: 3
      testPoints: 
        type: number
        example: 90
      testMaxPoints: 
        type: number
        example: 100
      testAssignmentPoints: 
        type: number
        example: 30
      testAssignmentMaxPoints: 
        type: number
        example: 35
      projectPoints: 
        type: number
        example: 100
      projectMaxPoints: 
        type: number
        example: 100
  Course:
    type: object
    properties:
      id:
        type: number
        example: 4
      name:
        type: string
        example: 'CodersCamp 2021'
      sections:
        type: array
        items:
          $ref: '#/definitions/Section'
  Section:
    type: object
    properties:
      id: 
        type: number
        example: 5
      name: 
        type: string
        example: TypeScript
      startDate:
        type: string
        example: 01-02-2021
      endDate:
        type: string
        example: 21-02-2021
  Project:
    type: object
    properties:
      id:
        type: number
        example: 5
      sectionId:
        type: number
        example: 4
      projectName:
        type: string
        example: FitNotFat
      projectUrl:
        type: string
        example: 'github.com/FitNotFat'
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /CodersCamp2021/CodersCampAPI/1.0.0
schemes:
 - https